const endpoint = '../data/emojis.json';
const emojis = [];
const titleBlock = document.querySelector('.title-block');
const result = document.querySelector('#result');

/** */
getContent();
function getContent() {
  fetch(endpoint)
    .then(res => res.json())
    .then(data => {
      emojis.push(...data);

      let html = '';
      data.forEach(emoji => {
        if (emoji.src) {
          html += `
            <li class="emoji-item">
              <img src="${emoji.src}" alt="${emoji.char}">
              <span class="emoji-char">${emoji.char}</span>
            </li>
          `;
        }
      });

      result.innerHTML = html;
    })
    .catch(err => console.log(err));
}
/** */

/**
 * Search Field
 */
function findMatchesSearch(wordToMatch, emojis) {
  return emojis.filter(emoji => {
    const regex = new RegExp(wordToMatch, 'gi');

    // return emoji.name.match(regex) || emoji.code.match(regex);
    return emoji.name.match(regex);
  });
}

function displayMatchesSearch() {
  const clearBtn = document.querySelector('.wr-clear-search-btn');
  clearBtn.addEventListener('click', () => {
    searchInput.value = '';
    clearBtn.classList.remove('active');
    getContent();
  });

  if (!searchInput.value.length) {
    clearBtn.classList.remove('active');
  } else {
    clearBtn.classList.add('active');
  }

  const matchArray = findMatchesSearch(this.value, emojis);
  const html = matchArray
    .map(emoji => {
      return `
        <li class="emoji-item">
          <img src="${emoji.src}" alt="${emoji.char}">
          <span class="emoji-char">${emoji.char}</span>
        </li>
      `;
    })
    .join('');

  result.innerHTML = html;
  // titleBlock.style.display = 'none';
}

const searchInput = document.querySelector('.search-field');
// searchInput.addEventListener('change', displayMatchesSearch);
searchInput.addEventListener('keyup', displayMatchesSearch);

/**
 * Tabs Filter
 */
const categoryItems = document.querySelectorAll('.search-filter a');

function findMatchesFilter(filterMatch, emojis) {
  return emojis.filter(emoji => {
    const regex = new RegExp(filterMatch, 'gi');
    if (emoji.category) {
      return emoji.category.match(regex);
    } else {
      return null;
    }
  });
}

function displayMatchesFilter(e) {
  e.preventDefault();

  const matchArray = findMatchesFilter(this.getAttribute('href'), emojis);
  const html = matchArray
    .map(emoji => {
      titleBlock.textContent = emoji.category;
      titleBlock.style.display = 'block';
      return `
        <li class="emoji-item">
          <img src="${emoji.src}" alt="${emoji.char}">
          <span class="emoji-char">${emoji.char}</span>
        </li>
      `;
    })
    .join('');

  if (html) {
    result.innerHTML = html;
  } else {
    result.innerHTML = 'NOBODY!!!';
    titleBlock.style.display = 'none';
  }
}

// categoryItems.addEventListener('click', findMatchesFilter);
categoryItems.forEach(el => el.addEventListener('click', displayMatchesFilter));

/**
 * Copy emoji
 */
const emojisContent = document.querySelector('.emoji-block');
const chooseField = document.querySelector('.choose-field');

emojisContent.addEventListener('click', getEmoji);

function getEmoji(em) {
  const clearBtn = document.querySelector('.wr-clear-choose-btn');
  clearBtn.classList.add('active');

  clearBtn.addEventListener('click', () => {
    chooseField.value = '';
    clearBtn.classList.remove('active');
  });

  if (em.target != result) {
    const emoji = em.target.textContent;
    const emojiContainer = em.target.parentNode;
    const emojiCopyMessage = `
      <div class="emoji-copy-message">
        <img src="${em.target.parentElement.firstElementChild.getAttribute(
          'src'
        )}">
        <span>Copied!</span>
      </div>
    `;

    let textarea = document.createElement('textarea');
    textarea.textContent = emoji;
    textarea.style.position = 'fixed';
    document.body.appendChild(textarea);
    textarea.select();
    try {
      document.execCommand('copy');
    } catch (err) {
      console.warn('Copy to clipboard failed.', err);
      return false;
    } finally {
      document.body.removeChild(textarea);
    }

    emojiContainer.insertAdjacentHTML('beforeend', emojiCopyMessage);

    setTimeout(() => {
      emojiContainer.removeChild(
        em.target.parentElement.querySelector('.emoji-copy-message')
      );
    }, 800);

    if (emoji != 'Copied!') {
      chooseField.value += emoji.trim();
    }
  }
}

const copyBtn = document.querySelector('.wr-btn-copy');
copyBtn.addEventListener('click', () => {
  const chooseField = document.querySelector('.choose-field');
  chooseField.select();

  const messageCopyField = document.querySelector('.message-info');
  setTimeout(() => {
    messageCopyField.classList.remove('active');
  }, 1500);

  if (chooseField.value.length) {
    messageCopyField.classList.add('active');

    try {
      const successful = document.execCommand('copy');
      const msg = successful ? 'successful' : 'unsuccessful';
      console.log('Copying text command was ' + msg);
    } catch (err) {
      console.log('Oops, unable to copy', err);
    }
  }
});

/**
 * Search categories
 */
const categories = document.querySelectorAll('.search-filter li');
categories.forEach(category => {
  category.addEventListener('click', function() {
    if (this.classList != 'active') {
      for (let cat of categories) {
        cat.classList.remove('active');
      }
    }
    this.classList.add('active');
  });
});

/**
 * Drag categories panel
 */
window.addEventListener(
  'load',
  () => {
    const bodyCatPanel = document.querySelector('.block-search-filter');
    const catPanel = document.querySelector('.search-filter');
    let boxleft;
    let startx;
    let dist = 0;
    let touchobj = null;

    catPanel.style.cssText = 'left: 0; top: 0;';

    catPanel.addEventListener(
      'touchstart',
      e => {
        touchobj = e.changedTouches[0];
        boxleft = parseInt(catPanel.style.left);
        startx = parseInt(touchobj.clientX);
      },
      false
    );

    catPanel.addEventListener(
      'touchmove',
      e => {
        touchobj = e.changedTouches[0];
        let dist = parseInt(touchobj.clientX) - startx;
        catPanel.style.left =
          (boxleft + dist > 185
            ? 185
            : boxleft + dist < 0 ? 0 : boxleft + dist) + 'px';
        e.preventDefault();
      },
      false
    );
  },
  false
);

/*
"use strict";function _toConsumableArray(e){if(Array.isArray(e)){for(var t=0,n=Array(e.length);t<e.length;t++)n[t]=e[t];return n}return Array.from(e)}var endpoint="../data/emojis.json",emojis=[],titleBlock=document.querySelector(".title-block"),result=document.querySelector("#result");function getContent(){fetch(endpoint).then(function(e){return e.json()}).then(function(e){emojis.push.apply(emojis,_toConsumableArray(e));var t="";e.forEach(function(e){e.src&&(t+='\n            <li class="emoji-item">\n              <img src="'+e.src+'" alt="'+e.char+'">\n              <span class="emoji-char">'+e.char+"</span>\n            </li>\n          ")}),result.innerHTML=t}).catch(function(e){return console.log(e)})}function findMatchesSearch(n,e){return e.filter(function(e){var t=new RegExp(n,"gi");return e.name.match(t)})}function displayMatchesSearch(){var e=document.querySelector(".wr-clear-search-btn");e.addEventListener("click",function(){searchInput.value="",e.classList.remove("active"),getContent()}),searchInput.value.length?e.classList.add("active"):e.classList.remove("active");var t=findMatchesSearch(this.value,emojis).map(function(e){return'\n        <li class="emoji-item">\n          <img src="'+e.src+'" alt="'+e.char+'">\n          <span class="emoji-char">'+e.char+"</span>\n        </li>\n      "}).join("");result.innerHTML=t}getContent();var searchInput=document.querySelector(".search-field");searchInput.addEventListener("keyup",displayMatchesSearch);var categoryItems=document.querySelectorAll(".search-filter a");function findMatchesFilter(n,e){return e.filter(function(e){var t=new RegExp(n,"gi");return e.category?e.category.match(t):null})}function displayMatchesFilter(e){e.preventDefault();var t=findMatchesFilter(this.getAttribute("href"),emojis).map(function(e){return titleBlock.textContent=e.category,titleBlock.style.display="block",'\n        <li class="emoji-item">\n          <img src="'+e.src+'" alt="'+e.char+'">\n          <span class="emoji-char">'+e.char+"</span>\n        </li>\n      "}).join("");t?result.innerHTML=t:(result.innerHTML="NOBODY!!!",titleBlock.style.display="none")}categoryItems.forEach(function(e){return e.addEventListener("click",displayMatchesFilter)});var emojisContent=document.querySelector(".emoji-block"),chooseField=document.querySelector(".choose-field");function getEmoji(e){var t=document.querySelector(".wr-clear-choose-btn");if(t.classList.add("active"),t.addEventListener("click",function(){chooseField.value="",t.classList.remove("active")}),e.target!=result){var n=e.target.textContent,r=e.target.parentNode,c='\n      <div class="emoji-copy-message">\n        <img src="'+e.target.parentElement.firstElementChild.getAttribute("src")+'">\n        <span>Copied!</span>\n      </div>\n    ',o=document.createElement("textarea");o.textContent=n,o.style.position="fixed",document.body.appendChild(o),o.select();try{document.execCommand("copy")}catch(e){return console.warn("Copy to clipboard failed.",e),!1}finally{document.body.removeChild(o)}r.insertAdjacentHTML("beforeend",c),setTimeout(function(){r.removeChild(e.target.parentElement.querySelector(".emoji-copy-message"))},800),"Copied!"!=n&&(chooseField.value+=n.trim())}}emojisContent.addEventListener("click",getEmoji);var copyBtn=document.querySelector(".wr-btn-copy");copyBtn.addEventListener("click",function(){var e=document.querySelector(".choose-field");e.select();var t=document.querySelector(".message-info");if(setTimeout(function(){t.classList.remove("active")},1500),e.value.length){t.classList.add("active");try{var n=document.execCommand("copy")?"successful":"unsuccessful";console.log("Copying text command was "+n)}catch(e){console.log("Oops, unable to copy",e)}}});var categories=document.querySelectorAll(".search-filter li");categories.forEach(function(e){e.addEventListener("click",function(){if("active"!=this.classList){var e=!0,t=!1,n=void 0;try{for(var r,c=categories[Symbol.iterator]();!(e=(r=c.next()).done);e=!0){r.value.classList.remove("active")}}catch(e){t=!0,n=e}finally{try{!e&&c.return&&c.return()}finally{if(t)throw n}}}this.classList.add("active")})}),window.addEventListener("load",function(){document.querySelector(".block-search-filter");var n=document.querySelector(".search-filter"),r=void 0,c=void 0,o=null;n.style.cssText="left: 0; top: 0;",n.addEventListener("touchstart",function(e){o=e.changedTouches[0],r=parseInt(n.style.left),c=parseInt(o.clientX)},!1),n.addEventListener("touchmove",function(e){o=e.changedTouches[0];var t=parseInt(o.clientX)-c;n.style.left=(185<r+t?185:r+t<0?0:r+t)+"px",e.preventDefault()},!1)},!1);
*/